#include <bits/stdc++.h>
#define int long long
#define endl "\n"
using namespace std;

const int maxn=1e3+1;
int n, m;
int grid[maxn][maxn];
struct SEG1D {
    int maior[4*maxn];
    void build(int id, int i, int l, int r) {
        if(l==r) {
            maior[id]=grid[i][l];
            return;
        }

        int mid = (l+r)/2;
        build(2*id,i,l,mid);
        build(2*id+1,i,mid+1,r);
        maior[id]=max(maior[2*id],maior[2*id+1]);
    }

    int qry(int id, int tl, int tr, int l, int r) {
        if(tl>r or tr<l) return 0;
        if(tl>=l and tr<=r) return maior[id];

        int mid = (tl+tr)/2;
        return max(
            qry(2*id,tl,mid,l,r), qry(2*id+1,mid+1,tr,l,r)
        );
    }
} seg1d[maxn];
struct SEG2D {
    int maior[4*maxn];
    void build(int id, int l, int r) {
        if(l==r) {
            seg1d[l].build(1,l,1,m);
            maior[id]=seg1d[l].maior[1];
            return;
        }

        int mid = (l+r)/2;
        build(2*id,l,mid);
        build(2*id+1,mid+1,r);
        maior[id]=max(maior[2*id],maior[2*id+1]);
    }

    int qry(int id, int tl, int tr, int l, int r, int a, int b) {
        if(tl>r or tr<l) return 0;
        if(tl>=l and tr<=r) {
            if(tl==tr) return seg1d[tl].qry(1,1,m,a,b);
        }

        int mid = (tl+tr)/2;
        return max(
            qry(2*id,tl,mid,l,r,a,b), qry(2*id+1,mid+1,tr,l,r,a,b)
        );
    }
} seg2d;

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    cin >> n >> m;
    for(int i=1; i<=n; ++i) {
        for(int j=1; j<=m; ++j) cin >> grid[i][j];
    }
    seg2d.build(1,1,n);

    int q;
    cin >> q;
    for(int i=0; i<q; ++i) {
        int l, r, a, b;
        cin >> l >> a >> r >> b;
        cout << seg2d.qry(1,1,n,l,r,a,b) << endl;
    }
}
